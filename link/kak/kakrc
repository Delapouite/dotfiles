# basics

colorscheme dracula
alias global co colorscheme

set global ui_options ncurses_assistant=none:ncurses_change_colors=true
set global autoinfo normal|command|onkey

set global tabstop 2
set global indentwidth 2
set global scrolloff 5,1

set global grepcmd 'rg --column'

decl str termcmd 'xterm -e sh -c'

set global modelinefmt %{
%sh{
  bs=${kak_buflist//[^:]};
  echo $((${#bs}+1)) buf
}
· %val{bufname} [%opt{filetype}]
· %val{cursor_line}:%val{cursor_char_column}
· {{context_info}} {{mode_info}}
· %val{client}@[%val{session}]
}

# mappings

# vim old habits
map global normal D '<a-l>d'
map global normal Y '<a-l>y'

# black hole registers
map global normal <a-c> '"_c'
map global normal <a-d> '"_d'

# space is my leader
map global normal <space> ,
map global normal <backspace> <space>

# remap for lafayette
map global normal , ';'
map global normal <a-,> '<a-;>'
map global insert <a-,> '<a-;>'

map global insert <tab> '<a-;><gt>'
map global insert <backtab> '<a-;><lt>'

map global user F :goto-file<ret> -docstring 'goto file'

# user (leader) mappings

map global user <space> : -docstring 'command (: alias)'

# select all occurrences in this buffer
map global user a '*%s<c-/><ret>' -docstring 'select all'
map global user c <a-s>:comment-line<ret> -docstring 'comment line'
map global user . ':edit ~/.config/kak/kakrc<ret>' -docstring 'edit kakrc'

map global user 1 ':find-buffer-by-index 1<ret>' -docstring 'buf 1'
map global user 2 ':find-buffer-by-index 2<ret>' -docstring 'buf 2'
map global user 3 ':find-buffer-by-index 3<ret>' -docstring 'buf 3'
map global user 4 ':find-buffer-by-index 4<ret>' -docstring 'buf 4'
map global user 5 ':find-buffer-by-index 5<ret>' -docstring 'buf 5'
map global user 6 ':find-buffer-by-index 6<ret>' -docstring 'buf 6'
map global user 7 ':find-buffer-by-index 7<ret>' -docstring 'buf 7'
map global user 8 ':find-buffer-by-index 8<ret>' -docstring 'buf 8'
map global user 9 ':find-buffer-by-index 9<ret>' -docstring 'buf 9'

# fzf
map global user l :buffers<ret> -docstring 'show buflist'
map global user b :fzf-buffer<ret> -docstring 'FZF buffer'
map global user f :fzf-file<ret> -docstring 'FZF file'

# file explorer
map global user e :new<ret> -docstring 'new client'
map global user g :change-dirname<ret> -docstring 'change dirname'
map global user r %{:suspend "ranger --selectfile=%val{bufname} --choosefiles=/tmp/ranger-files &&fg" ranger<ret>} -docstring 'ranger'

# buffer
map global user d :delete-buffer<ret> -docstring 'delete buffer'
map global user n :buffer-next<ret>:buffers<ret> -docstring 'buffer next'
map global user N :buffer-previous<ret>:buffers<ret> -docstring 'buffer prev'
map global user q :quit<ret> -docstring 'quit'
map global user w '<esc>:w<ret>; :echo -color Information "Written"<ret>' -docstring 'write'
map global user s ":auto-pairs-surround<ret>" -docstring 'surround'

# ← system clipboard
map global user y '<a-|>xsel --input --clipboard<ret>; :echo -color Information "copied selection to X11 clipboard"<ret>' -docstring 'yank from clipboard'
map global user p '<a-!>xsel --output --clipboard<ret>' -docstring 'replace from clipboard'
map global user P '!xsel --output --clipboard<ret>' -docstring 'print from clipboard'

map global user + :expand<ret> -docstring 'expand'

def -hidden select-next-camel %{
  exec /[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}

def -hidden extend-next-camel %{
  exec ?[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}

map global normal <c-w> :select-next-camel<ret>

# highlights

addhl -group / group trailing_white_spaces
addhl -group /trailing_white_spaces regex \h+$ 0:Error

# hooks

decl -hidden regex curword

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>\`\w+\'<ret>
        set buffer curword "\b\Q%val{selection}\E\b"
    } catch %{
        set buffer curword ''
    } }
}

hook global WinCreate .* %{
  addhl show_matching
  #addhl show_whitespaces
  addhl number_lines -relative -hlcursor
  addhl dynregex '%reg{/}' 0:+u 1:+b

  # Highlight the word under the cursor
  addhl dynregex '%opt{curword}' 0:CurrentWord
}

# filetypes

hook global WinSetOption filetype=javascript %{
  set window formatcmd 'prettier --stdin --semi false --single-quote --jsx-bracket-same-line --trailing-comma all'
  set window lintcmd 'eslint -f ~/eslint-kakoune.js'
  lint-enable
}

hook global WinSetOption filetype=rust %{
  set window formatcmd 'rustfmt'
}

hook global WinSetOption filetype=json %{
  set window formatcmd 'jq .'
}

hook global BufOpenFile .* %{
  editorconfig-load
}

# escape hatch
hook global InsertChar j %{ try %{
  exec -draft hH <a-k>jj<ret> d
  exec <esc>
}}
hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
  write
}}

hook global InsertBegin .* %{
  rmhl trailing_white_spaces
  echo -color Information '— INSERT —'
}

hook global InsertEnd .* %{
  addhl ref trailing_white_spaces
  lint
}

# → system clipboard
hook global NormalKey y|d|c %{ nop %sh{
  printf %s "$kak_reg_dquote" | xsel --input --clipboard
}}

hook global InsertCompletionShow .* %{
  map window insert <tab> <c-n>
  map window insert <backtab> <c-p>
}

hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <backtab> <c-p>
}

# functions

face volatile +bi

def volatile-highlighters-enable -docstring 'Enable volatile highlighters' %{
  hook window -group volatile-highlighters NormalKey [ydcpP] %{ try %{
    add-highlighter dynregex '%reg{"}' 0:volatile
  }}
  hook window -group volatile-highlighters NormalKey [^ydcpP] %{ try %{
    remove-highlighter dynregex_%reg{"}
  }}
}

def volatile-highlighters-disable -docstring 'Disable volatile highlighters' %{
  remove-highlighter dynregex_%reg{"}
  remove-hooks window volatile-highlighters
}

# /tmp/ranger-files is populated by ranger --choosefiles
def ranger -docstring 'Open files previously chosen by ranger' %{ %sh{
  while read f; do
    echo "edit $f;"
  done < '/tmp/ranger-files'
}}

def suspend -params 2 %{ %sh{
  nohup sh -c "sleep 0.3; xdotool type --delay 1 '$1'; xdotool key Return" > /dev/null 2>&1 &
  /usr/bin/kill -SIGTSTP $PPID
  echo "$2"
}}

def -docstring 'ripgrep in current dir' \
find -params 1 -shell-candidates %{ rg --files } %{ edit %arg{1} }

def -docstring 'invoke fzf to open a file' \
fzf-file %{ %sh{
  if [ -z "$TMUX" ]; then
    echo "exec :find<space>"
  else
    FILE=$(rg --files --hidden | fzf-tmux -d 15 --preview="highlight --force -O ansi {} | head -n 30" --preview-window=right:50%)
    if [ -n "$FILE" ]; then
      echo "eval -client '$kak_client' 'edit ${FILE}'" | kak -p ${kak_session}
    fi
  fi
}}

def -docstring 'invoke fzf to select a buffer' \
fzf-buffer %{ %sh{
  if [ -z "$TMUX" ]; then
    echo "exec :buffer<space>"
  else
    BUFFER=$(echo ${kak_buflist} | tr : '\n' | fzf-tmux -d 15)
    if [ -n "$BUFFER" ]; then
      echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
    fi
  fi
}}

def ide %{
  rename-client main
  new rename-client tools
  set global toolsclient tools
  set global jumpclient main

  nop %sh{
    if [[ -n $TMUX ]]; then
      tmux select-layout tiled
      tmux resize-pane -t 1 -y 10
      tmux select-pane -t 0
    else
      i3-msr
    fi
  }
}

# does not work because of redeclarations
def reload %{
  source %val{bufname}
}

def grow-selection %{
  exec '<a-:>L<a-;>H'
}

def shrink-selection %{
  exec '<a-:>H<a-;>L'
}

def selection-length %{ %sh{
  echo "echo ${#kak_selection}"
}}

decl -hidden str goto_file_suffix '.js'

def goto-file %{
  # select the next string on the line
  exec gh/['"][^'"\n]*?['"]<ret>
  # remove quotes
  shrink-selection
  # gf
  change-dirname
  edit -existing %sh{ echo "${kak_selection}${kak_opt_goto_file_suffix}" }
}

def change-dirname %{ %sh{
  buffer_dirname=$(dirname "${kak_bufname}")
  echo "exec :cd<space>$buffer_dirname<ret>"
}}

decl str lsp_servers %{
  python:pyls
  typescript:node ~/code/github/javascript-typescript-langserver/lib/language-server-stdio.js
  javascript:node ~/code/github/javascript-typescript-langserver/lib/language-server-stdio.js -t
  go:go-langserver
}

def lsp-start %{ %sh{
  ( python $HOME/code/github/kakoune/libkak/lspc.py $kak_session
  ) > /dev/null 2>&1 < /dev/null &
} }

# buflist in info box
def buffers %{ %sh{
  echo -n info -title buffers -- %^
  index=0
  (while read -d : buf; do
    index=$(($index+1))
    if [[ "$buf" == "$kak_bufname" ]]; then
      echo "> $index - $buf"
    else
      echo "  $index - $buf"
    fi
  done) <<< "$kak_buflist"
  echo ^
} }

def -hidden -params 1 find-buffer-by-index %{ %sh{
  index=0
  (while read -d : buf; do
    index=$(($index+1))
    if [[ $index == $1 ]]; then
      echo "b $buf"
    fi
  done) <<< "$kak_buflist"
} }
